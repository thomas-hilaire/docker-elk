input{
  file {
    path => "/opush/opush.*.log"
    codec => multiline {
      pattern => "%{LOG_HEADER}"
      negate => true
      what => "previous"
    }
    start_position => beginning
  }
}

filter {
  grok {
    match => [ "message", "%{LOG_HEADER} %{VERYGREEDYDATA:data}$" ]
  }
  grok {
    match =>  ["path", "opush\.%{FILE_DATE:filedate}\.%{DIGIT}+\.log"]
    add_field => {
      "date_to_match" => "%{filedate}T%{opushtime}Z"
    }
  }
  date {
    match => [ "date_to_match", "ISO8601"]
    remove_field => ["date_to_match", "filedate", "opushtime"]
  }
}

filter {
  if [logger] == "OBM-SYNC" {
    grok {
      match => [ 
        "data", "action %{OBM_SYNC_REQ}",
        "data", "response %{OBM_SYNC_REP}"
      ]
    }
  }
}

filter {
  if [logger] == "SUMMARY.OUT" {
    grok {
      match => ["data", "CHANGE: %{NONNEGINT:summary_out_change:int}, DELETE: %{NONNEGINT:summary_out_delete:int}, FETCH: %{NONNEGINT:summary_out_fetch:int}"]
    }
  }
  if [logger] == "SUMMARY.IN" {
    grok {
      match => ["data", "CHANGE: %{NONNEGINT:summary_in_change:int}, DELETE: %{NONNEGINT:summary_in_delete:int}, FETCH: %{NONNEGINT:summary_in_fetch:int}"]
    }
  }
}

output{
  if "_grokparsefailure" in [tags] {
     stdout { codec => rubydebug } 
  }
  elasticsearch_http { 
     host => "localhost"
  }  
}
